// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  password     String
  profileColor String       @default("#3498db")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  messages      Message[]
  suggestedTracks MusicTrack[]
  votes         MusicVote[]
  roomUsers     RoomUser[]

  @@map("users")
}

model Room {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  messages     Message[]
  musicTracks  MusicTrack[]
  musicState   MusicRoomState?
  roomUsers    RoomUser[]

  @@map("rooms")
}

model RoomUser {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  joinedAt  DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@map("room_users")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  userId    String
  roomId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@map("messages")
}

model MusicTrack {
  id             String    @id @default(uuid())
  spotifyTrackId String
  title          String
  artist         String
  album          String?
  albumCoverUrl  String?
  previewUrl     String?
  durationMs     Int?
  isPlaying      Boolean   @default(false)
  isQueued       Boolean   @default(false)
  voteCount      Int       @default(0)
  suggestedById  String
  roomId         String
  createdAt      DateTime  @default(now())

  // Relations
  suggestedBy    User      @relation(fields: [suggestedById], references: [id])
  room           Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  votes          MusicVote[]
  musicState     MusicRoomState[]

  @@index([roomId])
  @@map("music_tracks")
}

model MusicVote {
  id        String   @id @default(uuid())
  userId    String
  musicId   String
  createdAt DateTime @default(now())

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  music     MusicTrack @relation(fields: [musicId], references: [id], onDelete: Cascade)

  @@unique([userId, musicId])
  @@index([musicId])
  @@map("music_votes")
}

model MusicRoomState {
  id               String    @id @default(uuid())
  roomId           String    @unique
  currentTrackId   String?
  isPlaying        Boolean   @default(false)
  playbackPosition Float     @default(0)
  volume           Int       @default(100)
  updatedAt        DateTime  @updatedAt

  // Relations
  room             Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  currentTrack     MusicTrack? @relation(fields: [currentTrackId], references: [id], onDelete: SetNull)

  @@map("music_room_states")
}
